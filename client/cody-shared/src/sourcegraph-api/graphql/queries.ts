export const CURRENT_USER_ID_QUERY = `
query CurrentUser {
    currentUser {
        id
    }
}`

export const CURRENT_SITE_VERSION_QUERY = `
query SiteProductVersion {
    site {
        productVersion
    }
}`

export const CURRENT_SITE_HAS_CODY_ENABLED_QUERY = `
query SiteHasCodyEnabled {
    site {
        isCodyEnabled
    }
}`

export const CURRENT_SITE_GRAPHQL_FIELDS_QUERY = `
query SiteGraphQLFields {
    __type(name: "Site") {
        fields {
            name
        }
    }
}`

export const CURRENT_USER_ID_AND_VERIFIED_EMAIL_QUERY = `
query CurrentUser {
    currentUser {
        id
        hasVerifiedEmail
    }
}`

export const REPOSITORY_ID_QUERY = `
query Repository($name: String!) {
	repository(name: $name) {
		id
	}
}`

export const REPOSITORY_IDS_QUERY = `
query Repositories($names: [String!]!, $first: Int!) {
	repositories(names: $names, first: $first) {
                nodes {
		        id
                        name
                }
	}
}`

export const REPOSITORY_NAMES_QUERY = `
query Repositories($first: Int!) {
	repositories(first: $first) {
                nodes {
		        id
                        name
                }
	}
}`

export const REPOSITORY_EMBEDDING_EXISTS_QUERY = `
query Repository($name: String!) {
	repository(name: $name) {
                id
                embeddingExists
	}
}`

export const GET_CODY_CONTEXT_QUERY = `
query GetCodyContext($repos: [ID!]!, $query: String!, $codeResultsCount: Int!, $textResultsCount: Int!) {
	getCodyContext(repos: $repos, query: $query, codeResultsCount: $codeResultsCount, textResultsCount: $textResultsCount) {
		... on FileChunkContext {
                        blob {
                                path
                                repository {
                                        id
                                        name
                                }
                                commit {
                                        id
                                        oid
                                }
                        }
			startLine
			endLine
                        chunkContent
		}
	}
}`

export const SEARCH_EMBEDDINGS_QUERY = `
query EmbeddingsSearch($repos: [ID!]!, $query: String!, $codeResultsCount: Int!, $textResultsCount: Int!) {
	embeddingsMultiSearch(repos: $repos, query: $query, codeResultsCount: $codeResultsCount, textResultsCount: $textResultsCount) {
		codeResults {
                        repoName
                        revision
			fileName
			startLine
			endLine
			content
		}
		textResults {
                        repoName
                        revision
			fileName
			startLine
			endLine
			content
		}
	}
}`

export const LEGACY_SEARCH_EMBEDDINGS_QUERY = `
query LegacyEmbeddingsSearch($repo: ID!, $query: String!, $codeResultsCount: Int!, $textResultsCount: Int!) {
	embeddingsSearch(repo: $repo, query: $query, codeResultsCount: $codeResultsCount, textResultsCount: $textResultsCount) {
		codeResults {
			fileName
			startLine
			endLine
			content
		}
		textResults {
			fileName
			startLine
			endLine
			content
		}
	}
}`

export const SEARCH_ATTRIBUTION_QUERY = `
query SnippetAttribution($snippet: String!) {
    snippetAttribution(snippet: $snippet) {
        limitHit
        nodes {
            repositoryName
        }
    }
}`

export const IS_CONTEXT_REQUIRED_QUERY = `
query IsContextRequiredForChatQuery($query: String!) {
	isContextRequiredForChatQuery(query: $query)
}`

export const LOG_EVENT_MUTATION = `
mutation LogEventMutation($event: String!, $userCookieID: String!, $url: String!, $source: EventSource!, $argument: String, $publicArgument: String) {
    logEvent(
		event: $event
		userCookieID: $userCookieID
		url: $url
		source: $source
		argument: $argument
		publicArgument: $publicArgument
    ) {
		alwaysNil
	}
}`

export const CODY_APP_ADD_CODE_HOST = `
mutation AddRemoteCodeHost($input: AddExternalServiceInput!) {
    addExternalService(input: $input) {
        ...CodeHost
    }
}
fragment CodeHost on ExternalService {
    __typename
    id
    kind
    repoCount
    displayName
    lastSyncAt
    nextSyncAt
    lastSyncError
    config
}`

export const CODY_APP_GET_LOCAL_CODE_HOSTS = `
query GetLocalCodeHosts {
    localExternalServices {
        id
        path
        autogenerated
    }
}`

export const CODY_APP_REPO_EMBEDDING_JOBS_LIST_QUERY = `
query RepoEmbeddingJobsList($first: Int, $after: String, $query: String, $state: String) {
    repoEmbeddingJobs(first: $first, after: $after, query: $query, state: $state) {
        nodes {
            ...RepoEmbeddingJobFields
        }
        totalCount
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}

fragment RepoEmbeddingJobFields on RepoEmbeddingJob {
    id
    state
    failureMessage
    finishedAt
    queuedAt
    startedAt
    cancel
    repo {
        name
        url
    }
    stats {
        filesScheduled
        filesEmbedded
        filesSkipped
    }
}
`
