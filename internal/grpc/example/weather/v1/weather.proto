syntax = "proto3";

package grpc.example.weather.v1;

option go_package = "github.com/sourcegraph/sourcegraph/internal/grpc/example/weather/v1";

// The weather service definition.
service WeatherService {
  // Unary RPC: Get current weather for a location.
  rpc GetCurrentWeather(LocationRequest) returns (WeatherResponse) {}

  // Server Streaming RPC: Subscribe to severe weather alerts.
  rpc SubscribeWeatherAlerts(AlertRequest) returns (stream AlertResponse) {}

  // Client Streaming RPC: Send weather data from sensors.
  rpc UploadWeatherData(stream SensorData) returns (UploadStatus) {}

  // Bidirectional Streaming RPC: Real-time weather updates.
  rpc RealTimeWeather(stream LocationUpdate) returns (stream WeatherResponse) {}

  // Client Streaming RPC: Upload a weather screenshot.
  rpc UploadWeatherScreenshot(stream UploadWeatherScreenshotRequest) returns (UploadWeatherScreenshotResponse) {}

  // Deprecated RPC: Get current weather for a location.
  rpc GetCurrentWeatherOld(LocationRequest) returns (WeatherResponse) {
    option deprecated = true; // Mark the RPC as deprecated. Nobody should use this anymore.
    // When generating go code, the deprecated option will be translated to a deprecated comment. And gopls and various tools
    // will show a warning when using this RPC.
  }
}

message LocationRequest {
  string location = 1;
}

message WeatherResponse {
  string description = 1;
  Temperature temperature = 2;

  // Additional fields can be added here.
}

message Temperature {
  enum Unit {
    UNIT_CELSIUS = 0;
    UNIT_FAHRENHEIT = 1;
    UNIT_KELVIN = 2;
  }

  double value = 1;
  Unit unit = 2;
}

message SensorOfflineError {
  // Note: renaming this message would break backwards compatibility, as older clients would not be able to
  // identify this message since it would be passed as an "Any" type when sending the error details.

  string sensorId = 1;
  string message = 2;
}

message UploadWeatherScreenshotRequest {
  message Metadata {
    string location = 1;
    string sensorId = 2;
    string fileName = 3;
  }

  message Payload {
    bytes data = 1;
  }

  oneof content {
    Metadata metadata = 1;
    Payload payload = 2;
  }
}

message UploadStatus {
  string message = 1;
}

message AlertRequest {
  string region = 1;
}

message AlertResponse {
  string alert = 1;
}

message SensorData {
  string sensorId = 1;
  Temperature temperature = 2;
  double humidity = 3;
}

message UploadWeatherScreenshotResponse {
  string message = 1;
}

message LocationUpdate {
  string location = 1;
}
