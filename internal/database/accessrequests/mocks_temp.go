// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package accessrequests

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/database/accessrequests) used
// for unit testing.
type MockStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *StoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *StoreCreateFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *StoreDoneFunc
	// GetByEmailFunc is an instance of a mock function object controlling
	// the behavior of the method GetByEmail.
	GetByEmailFunc *StoreGetByEmailFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *StoreGetByIDFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *StoreListFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *StoreUpdateFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *StoreWithTransactFunc
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore() *MockStore {
	return &MockStore{
		CountFunc: &StoreCountFunc{
			defaultHook: func(context.Context, *FilterArgs) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &StoreCreateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetByEmailFunc: &StoreGetByEmailFunc{
			defaultHook: func(context.Context, string) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		GetByIDFunc: &StoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		ListFunc: &StoreListFunc{
			defaultHook: func(context.Context, *FilterArgs, *database.PaginationArgs) (r0 []*types.AccessRequest, r1 error) {
				return
			},
		},
		UpdateFunc: &StoreUpdateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		WithTransactFunc: &StoreWithTransactFunc{
			defaultHook: func(context.Context, func(Store) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockStore creates a new mock of the Store interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockStore() *MockStore {
	return &MockStore{
		CountFunc: &StoreCountFunc{
			defaultHook: func(context.Context, *FilterArgs) (int, error) {
				panic("unexpected invocation of MockStore.Count")
			},
		},
		CreateFunc: &StoreCreateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockStore.Create")
			},
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockStore.Done")
			},
		},
		GetByEmailFunc: &StoreGetByEmailFunc{
			defaultHook: func(context.Context, string) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockStore.GetByEmail")
			},
		},
		GetByIDFunc: &StoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockStore.GetByID")
			},
		},
		ListFunc: &StoreListFunc{
			defaultHook: func(context.Context, *FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error) {
				panic("unexpected invocation of MockStore.List")
			},
		},
		UpdateFunc: &StoreUpdateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockStore.Update")
			},
		},
		WithTransactFunc: &StoreWithTransactFunc{
			defaultHook: func(context.Context, func(Store) error) error {
				panic("unexpected invocation of MockStore.WithTransact")
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom(i Store) *MockStore {
	return &MockStore{
		CountFunc: &StoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &StoreCreateFunc{
			defaultHook: i.Create,
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: i.Done,
		},
		GetByEmailFunc: &StoreGetByEmailFunc{
			defaultHook: i.GetByEmail,
		},
		GetByIDFunc: &StoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		ListFunc: &StoreListFunc{
			defaultHook: i.List,
		},
		UpdateFunc: &StoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithTransactFunc: &StoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// StoreCountFunc describes the behavior when the Count method of the parent
// MockStore instance is invoked.
type StoreCountFunc struct {
	defaultHook func(context.Context, *FilterArgs) (int, error)
	hooks       []func(context.Context, *FilterArgs) (int, error)
	history     []StoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Count(v0 context.Context, v1 *FilterArgs) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(StoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreCountFunc) SetDefaultHook(hook func(context.Context, *FilterArgs) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreCountFunc) PushHook(hook func(context.Context, *FilterArgs) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, *FilterArgs) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, *FilterArgs) (int, error) {
		return r0, r1
	})
}

func (f *StoreCountFunc) nextHook() func(context.Context, *FilterArgs) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreCountFunc) appendCall(r0 StoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreCountFuncCall objects describing the
// invocations of this function.
func (f *StoreCountFunc) History() []StoreCountFuncCall {
	f.mutex.Lock()
	history := make([]StoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreCountFuncCall is an object that describes an invocation of method
// Count on an instance of MockStore.
type StoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *FilterArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreCreateFunc describes the behavior when the Create method of the
// parent MockStore instance is invoked.
type StoreCreateFunc struct {
	defaultHook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	hooks       []func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	history     []StoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Create(v0 context.Context, v1 *types.AccessRequest) (*types.AccessRequest, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(StoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreCreateFunc) PushHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreCreateFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreCreateFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *StoreCreateFunc) nextHook() func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreCreateFunc) appendCall(r0 StoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreCreateFuncCall objects describing the
// invocations of this function.
func (f *StoreCreateFunc) History() []StoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]StoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreCreateFuncCall is an object that describes an invocation of method
// Create on an instance of MockStore.
type StoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.AccessRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreDoneFunc describes the behavior when the Done method of the parent
// MockStore instance is invoked.
type StoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []StoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(StoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *StoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDoneFunc) appendCall(r0 StoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDoneFuncCall objects describing the
// invocations of this function.
func (f *StoreDoneFunc) History() []StoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]StoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockStore.
type StoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreGetByEmailFunc describes the behavior when the GetByEmail method of
// the parent MockStore instance is invoked.
type StoreGetByEmailFunc struct {
	defaultHook func(context.Context, string) (*types.AccessRequest, error)
	hooks       []func(context.Context, string) (*types.AccessRequest, error)
	history     []StoreGetByEmailFuncCall
	mutex       sync.Mutex
}

// GetByEmail delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetByEmail(v0 context.Context, v1 string) (*types.AccessRequest, error) {
	r0, r1 := m.GetByEmailFunc.nextHook()(v0, v1)
	m.GetByEmailFunc.appendCall(StoreGetByEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByEmail method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetByEmailFunc) SetDefaultHook(hook func(context.Context, string) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByEmail method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetByEmailFunc) PushHook(hook func(context.Context, string) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetByEmailFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetByEmailFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, string) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *StoreGetByEmailFunc) nextHook() func(context.Context, string) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetByEmailFunc) appendCall(r0 StoreGetByEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetByEmailFuncCall objects describing
// the invocations of this function.
func (f *StoreGetByEmailFunc) History() []StoreGetByEmailFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetByEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetByEmailFuncCall is an object that describes an invocation of
// method GetByEmail on an instance of MockStore.
type StoreGetByEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetByEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetByEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetByIDFunc describes the behavior when the GetByID method of the
// parent MockStore instance is invoked.
type StoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.AccessRequest, error)
	hooks       []func(context.Context, int32) (*types.AccessRequest, error)
	history     []StoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) GetByID(v0 context.Context, v1 int32) (*types.AccessRequest, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(StoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetByIDFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetByIDFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *StoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetByIDFunc) appendCall(r0 StoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetByIDFuncCall objects describing the
// invocations of this function.
func (f *StoreGetByIDFunc) History() []StoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetByIDFuncCall is an object that describes an invocation of method
// GetByID on an instance of MockStore.
type StoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreListFunc describes the behavior when the List method of the parent
// MockStore instance is invoked.
type StoreListFunc struct {
	defaultHook func(context.Context, *FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error)
	hooks       []func(context.Context, *FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error)
	history     []StoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) List(v0 context.Context, v1 *FilterArgs, v2 *database.PaginationArgs) ([]*types.AccessRequest, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1, v2)
	m.ListFunc.appendCall(StoreListFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreListFunc) SetDefaultHook(hook func(context.Context, *FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreListFunc) PushHook(hook func(context.Context, *FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreListFunc) SetDefaultReturn(r0 []*types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreListFunc) PushReturn(r0 []*types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, *FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *StoreListFunc) nextHook() func(context.Context, *FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreListFunc) appendCall(r0 StoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreListFuncCall objects describing the
// invocations of this function.
func (f *StoreListFunc) History() []StoreListFuncCall {
	f.mutex.Lock()
	history := make([]StoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockStore.
type StoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *FilterArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *database.PaginationArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreUpdateFunc describes the behavior when the Update method of the
// parent MockStore instance is invoked.
type StoreUpdateFunc struct {
	defaultHook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	hooks       []func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	history     []StoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Update(v0 context.Context, v1 *types.AccessRequest) (*types.AccessRequest, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(StoreUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreUpdateFunc) SetDefaultHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreUpdateFunc) PushHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdateFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdateFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *StoreUpdateFunc) nextHook() func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdateFunc) appendCall(r0 StoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdateFuncCall objects describing the
// invocations of this function.
func (f *StoreUpdateFunc) History() []StoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdateFuncCall is an object that describes an invocation of method
// Update on an instance of MockStore.
type StoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.AccessRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreWithTransactFunc describes the behavior when the WithTransact method
// of the parent MockStore instance is invoked.
type StoreWithTransactFunc struct {
	defaultHook func(context.Context, func(Store) error) error
	hooks       []func(context.Context, func(Store) error) error
	history     []StoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) WithTransact(v0 context.Context, v1 func(Store) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(StoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(Store) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreWithTransactFunc) PushHook(hook func(context.Context, func(Store) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(Store) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(Store) error) error {
		return r0
	})
}

func (f *StoreWithTransactFunc) nextHook() func(context.Context, func(Store) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWithTransactFunc) appendCall(r0 StoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWithTransactFuncCall objects
// describing the invocations of this function.
func (f *StoreWithTransactFunc) History() []StoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]StoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWithTransactFuncCall is an object that describes an invocation of
// method WithTransact on an instance of MockStore.
type StoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(Store) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
