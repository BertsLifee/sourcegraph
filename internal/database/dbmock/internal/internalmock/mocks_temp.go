// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package internalmock

import (
	"context"
	"sync"

	internal "github.com/sourcegraph/sourcegraph/internal/database/dbmock/internal"
)

// MockDBStore is a mock implementation of the DBStore interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/database/dbmock/internal)
// used for unit testing.
type MockDBStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *DBStoreCreateFunc
}

// NewMockDBStore creates a new mock of the DBStore interface. All methods
// return zero values for all results, unless overwritten.
func NewMockDBStore() *MockDBStore {
	return &MockDBStore{
		CreateFunc: &DBStoreCreateFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockDBStore creates a new mock of the DBStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockDBStore() *MockDBStore {
	return &MockDBStore{
		CreateFunc: &DBStoreCreateFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockDBStore.Create")
			},
		},
	}
}

// NewMockDBStoreFrom creates a new mock of the MockDBStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockDBStoreFrom(i internal.DBStore) *MockDBStore {
	return &MockDBStore{
		CreateFunc: &DBStoreCreateFunc{
			defaultHook: i.Create,
		},
	}
}

// DBStoreCreateFunc describes the behavior when the Create method of the
// parent MockDBStore instance is invoked.
type DBStoreCreateFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []DBStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDBStore) Create(v0 context.Context) error {
	r0 := m.CreateFunc.nextHook()(v0)
	m.CreateFunc.appendCall(DBStoreCreateFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockDBStore instance is invoked and the hook queue is empty.
func (f *DBStoreCreateFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockDBStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBStoreCreateFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *DBStoreCreateFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreCreateFunc) appendCall(r0 DBStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *DBStoreCreateFunc) History() []DBStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreCreateFuncCall is an object that describes an invocation of method
// Create on an instance of MockDBStore.
type DBStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
