// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package accessrequests

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	accessrequests "github.com/sourcegraph/sourcegraph/internal/database/accessrequests"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockDBStore is a mock implementation of the DBStore interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/database/accessrequests) used
// for unit testing.
type MockDBStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *DBStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *DBStoreCreateFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *DBStoreDoneFunc
	// GetByEmailFunc is an instance of a mock function object controlling
	// the behavior of the method GetByEmail.
	GetByEmailFunc *DBStoreGetByEmailFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *DBStoreGetByIDFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *DBStoreListFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *DBStoreUpdateFunc
	// WithDBFunc is an instance of a mock function object controlling the
	// behavior of the method WithDB.
	WithDBFunc *DBStoreWithDBFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *DBStoreWithTransactFunc
}

// NewMockDBStore creates a new mock of the DBStore interface. All methods
// return zero values for all results, unless overwritten.
func NewMockDBStore() *MockDBStore {
	return &MockDBStore{
		CountFunc: &DBStoreCountFunc{
			defaultHook: func(context.Context, *accessrequests.FilterArgs) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &DBStoreCreateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		DoneFunc: &DBStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetByEmailFunc: &DBStoreGetByEmailFunc{
			defaultHook: func(context.Context, string) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		GetByIDFunc: &DBStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		ListFunc: &DBStoreListFunc{
			defaultHook: func(context.Context, *accessrequests.FilterArgs, *database.PaginationArgs) (r0 []*types.AccessRequest, r1 error) {
				return
			},
		},
		UpdateFunc: &DBStoreUpdateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		WithDBFunc: &DBStoreWithDBFunc{
			defaultHook: func(database.DB) (r0 accessrequests.DBStore) {
				return
			},
		},
		WithTransactFunc: &DBStoreWithTransactFunc{
			defaultHook: func(context.Context, func(accessrequests.DBStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockDBStore creates a new mock of the DBStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockDBStore() *MockDBStore {
	return &MockDBStore{
		CountFunc: &DBStoreCountFunc{
			defaultHook: func(context.Context, *accessrequests.FilterArgs) (int, error) {
				panic("unexpected invocation of MockDBStore.Count")
			},
		},
		CreateFunc: &DBStoreCreateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockDBStore.Create")
			},
		},
		DoneFunc: &DBStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockDBStore.Done")
			},
		},
		GetByEmailFunc: &DBStoreGetByEmailFunc{
			defaultHook: func(context.Context, string) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockDBStore.GetByEmail")
			},
		},
		GetByIDFunc: &DBStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockDBStore.GetByID")
			},
		},
		ListFunc: &DBStoreListFunc{
			defaultHook: func(context.Context, *accessrequests.FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error) {
				panic("unexpected invocation of MockDBStore.List")
			},
		},
		UpdateFunc: &DBStoreUpdateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockDBStore.Update")
			},
		},
		WithDBFunc: &DBStoreWithDBFunc{
			defaultHook: func(database.DB) accessrequests.DBStore {
				panic("unexpected invocation of MockDBStore.WithDB")
			},
		},
		WithTransactFunc: &DBStoreWithTransactFunc{
			defaultHook: func(context.Context, func(accessrequests.DBStore) error) error {
				panic("unexpected invocation of MockDBStore.WithTransact")
			},
		},
	}
}

// NewMockDBStoreFrom creates a new mock of the MockDBStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockDBStoreFrom(i accessrequests.DBStore) *MockDBStore {
	return &MockDBStore{
		CountFunc: &DBStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &DBStoreCreateFunc{
			defaultHook: i.Create,
		},
		DoneFunc: &DBStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetByEmailFunc: &DBStoreGetByEmailFunc{
			defaultHook: i.GetByEmail,
		},
		GetByIDFunc: &DBStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		ListFunc: &DBStoreListFunc{
			defaultHook: i.List,
		},
		UpdateFunc: &DBStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithDBFunc: &DBStoreWithDBFunc{
			defaultHook: i.WithDB,
		},
		WithTransactFunc: &DBStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// DBStoreCountFunc describes the behavior when the Count method of the
// parent MockDBStore instance is invoked.
type DBStoreCountFunc struct {
	defaultHook func(context.Context, *accessrequests.FilterArgs) (int, error)
	hooks       []func(context.Context, *accessrequests.FilterArgs) (int, error)
	history     []DBStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDBStore) Count(v0 context.Context, v1 *accessrequests.FilterArgs) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(DBStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockDBStore instance is invoked and the hook queue is empty.
func (f *DBStoreCountFunc) SetDefaultHook(hook func(context.Context, *accessrequests.FilterArgs) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockDBStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBStoreCountFunc) PushHook(hook func(context.Context, *accessrequests.FilterArgs) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, *accessrequests.FilterArgs) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, *accessrequests.FilterArgs) (int, error) {
		return r0, r1
	})
}

func (f *DBStoreCountFunc) nextHook() func(context.Context, *accessrequests.FilterArgs) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreCountFunc) appendCall(r0 DBStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreCountFuncCall objects describing the
// invocations of this function.
func (f *DBStoreCountFunc) History() []DBStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreCountFuncCall is an object that describes an invocation of method
// Count on an instance of MockDBStore.
type DBStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *accessrequests.FilterArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBStoreCreateFunc describes the behavior when the Create method of the
// parent MockDBStore instance is invoked.
type DBStoreCreateFunc struct {
	defaultHook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	hooks       []func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	history     []DBStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDBStore) Create(v0 context.Context, v1 *types.AccessRequest) (*types.AccessRequest, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(DBStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockDBStore instance is invoked and the hook queue is empty.
func (f *DBStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockDBStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBStoreCreateFunc) PushHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreCreateFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreCreateFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *DBStoreCreateFunc) nextHook() func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreCreateFunc) appendCall(r0 DBStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *DBStoreCreateFunc) History() []DBStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreCreateFuncCall is an object that describes an invocation of method
// Create on an instance of MockDBStore.
type DBStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.AccessRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBStoreDoneFunc describes the behavior when the Done method of the parent
// MockDBStore instance is invoked.
type DBStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []DBStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDBStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(DBStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockDBStore instance is invoked and the hook queue is empty.
func (f *DBStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockDBStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *DBStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreDoneFunc) appendCall(r0 DBStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreDoneFuncCall objects describing the
// invocations of this function.
func (f *DBStoreDoneFunc) History() []DBStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockDBStore.
type DBStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBStoreGetByEmailFunc describes the behavior when the GetByEmail method
// of the parent MockDBStore instance is invoked.
type DBStoreGetByEmailFunc struct {
	defaultHook func(context.Context, string) (*types.AccessRequest, error)
	hooks       []func(context.Context, string) (*types.AccessRequest, error)
	history     []DBStoreGetByEmailFuncCall
	mutex       sync.Mutex
}

// GetByEmail delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDBStore) GetByEmail(v0 context.Context, v1 string) (*types.AccessRequest, error) {
	r0, r1 := m.GetByEmailFunc.nextHook()(v0, v1)
	m.GetByEmailFunc.appendCall(DBStoreGetByEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByEmail method of
// the parent MockDBStore instance is invoked and the hook queue is empty.
func (f *DBStoreGetByEmailFunc) SetDefaultHook(hook func(context.Context, string) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByEmail method of the parent MockDBStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBStoreGetByEmailFunc) PushHook(hook func(context.Context, string) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreGetByEmailFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreGetByEmailFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, string) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *DBStoreGetByEmailFunc) nextHook() func(context.Context, string) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreGetByEmailFunc) appendCall(r0 DBStoreGetByEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreGetByEmailFuncCall objects
// describing the invocations of this function.
func (f *DBStoreGetByEmailFunc) History() []DBStoreGetByEmailFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreGetByEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreGetByEmailFuncCall is an object that describes an invocation of
// method GetByEmail on an instance of MockDBStore.
type DBStoreGetByEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreGetByEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreGetByEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBStoreGetByIDFunc describes the behavior when the GetByID method of the
// parent MockDBStore instance is invoked.
type DBStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.AccessRequest, error)
	hooks       []func(context.Context, int32) (*types.AccessRequest, error)
	history     []DBStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDBStore) GetByID(v0 context.Context, v1 int32) (*types.AccessRequest, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(DBStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockDBStore instance is invoked and the hook queue is empty.
func (f *DBStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockDBStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreGetByIDFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreGetByIDFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *DBStoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreGetByIDFunc) appendCall(r0 DBStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreGetByIDFuncCall objects describing
// the invocations of this function.
func (f *DBStoreGetByIDFunc) History() []DBStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreGetByIDFuncCall is an object that describes an invocation of
// method GetByID on an instance of MockDBStore.
type DBStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBStoreListFunc describes the behavior when the List method of the parent
// MockDBStore instance is invoked.
type DBStoreListFunc struct {
	defaultHook func(context.Context, *accessrequests.FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error)
	hooks       []func(context.Context, *accessrequests.FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error)
	history     []DBStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDBStore) List(v0 context.Context, v1 *accessrequests.FilterArgs, v2 *database.PaginationArgs) ([]*types.AccessRequest, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1, v2)
	m.ListFunc.appendCall(DBStoreListFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockDBStore instance is invoked and the hook queue is empty.
func (f *DBStoreListFunc) SetDefaultHook(hook func(context.Context, *accessrequests.FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockDBStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBStoreListFunc) PushHook(hook func(context.Context, *accessrequests.FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreListFunc) SetDefaultReturn(r0 []*types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *accessrequests.FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreListFunc) PushReturn(r0 []*types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, *accessrequests.FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *DBStoreListFunc) nextHook() func(context.Context, *accessrequests.FilterArgs, *database.PaginationArgs) ([]*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreListFunc) appendCall(r0 DBStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreListFuncCall objects describing the
// invocations of this function.
func (f *DBStoreListFunc) History() []DBStoreListFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockDBStore.
type DBStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *accessrequests.FilterArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *database.PaginationArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBStoreUpdateFunc describes the behavior when the Update method of the
// parent MockDBStore instance is invoked.
type DBStoreUpdateFunc struct {
	defaultHook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	hooks       []func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	history     []DBStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDBStore) Update(v0 context.Context, v1 *types.AccessRequest) (*types.AccessRequest, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(DBStoreUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockDBStore instance is invoked and the hook queue is empty.
func (f *DBStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockDBStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBStoreUpdateFunc) PushHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreUpdateFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreUpdateFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *DBStoreUpdateFunc) nextHook() func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreUpdateFunc) appendCall(r0 DBStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreUpdateFuncCall objects describing
// the invocations of this function.
func (f *DBStoreUpdateFunc) History() []DBStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreUpdateFuncCall is an object that describes an invocation of method
// Update on an instance of MockDBStore.
type DBStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.AccessRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBStoreWithDBFunc describes the behavior when the WithDB method of the
// parent MockDBStore instance is invoked.
type DBStoreWithDBFunc struct {
	defaultHook func(database.DB) accessrequests.DBStore
	hooks       []func(database.DB) accessrequests.DBStore
	history     []DBStoreWithDBFuncCall
	mutex       sync.Mutex
}

// WithDB delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDBStore) WithDB(v0 database.DB) accessrequests.DBStore {
	r0 := m.WithDBFunc.nextHook()(v0)
	m.WithDBFunc.appendCall(DBStoreWithDBFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithDB method of the
// parent MockDBStore instance is invoked and the hook queue is empty.
func (f *DBStoreWithDBFunc) SetDefaultHook(hook func(database.DB) accessrequests.DBStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithDB method of the parent MockDBStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBStoreWithDBFunc) PushHook(hook func(database.DB) accessrequests.DBStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreWithDBFunc) SetDefaultReturn(r0 accessrequests.DBStore) {
	f.SetDefaultHook(func(database.DB) accessrequests.DBStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreWithDBFunc) PushReturn(r0 accessrequests.DBStore) {
	f.PushHook(func(database.DB) accessrequests.DBStore {
		return r0
	})
}

func (f *DBStoreWithDBFunc) nextHook() func(database.DB) accessrequests.DBStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreWithDBFunc) appendCall(r0 DBStoreWithDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreWithDBFuncCall objects describing
// the invocations of this function.
func (f *DBStoreWithDBFunc) History() []DBStoreWithDBFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreWithDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreWithDBFuncCall is an object that describes an invocation of method
// WithDB on an instance of MockDBStore.
type DBStoreWithDBFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 database.DB
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 accessrequests.DBStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreWithDBFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreWithDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBStoreWithTransactFunc describes the behavior when the WithTransact
// method of the parent MockDBStore instance is invoked.
type DBStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(accessrequests.DBStore) error) error
	hooks       []func(context.Context, func(accessrequests.DBStore) error) error
	history     []DBStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDBStore) WithTransact(v0 context.Context, v1 func(accessrequests.DBStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(DBStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockDBStore instance is invoked and the hook queue is
// empty.
func (f *DBStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(accessrequests.DBStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockDBStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBStoreWithTransactFunc) PushHook(hook func(context.Context, func(accessrequests.DBStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(accessrequests.DBStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(accessrequests.DBStore) error) error {
		return r0
	})
}

func (f *DBStoreWithTransactFunc) nextHook() func(context.Context, func(accessrequests.DBStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreWithTransactFunc) appendCall(r0 DBStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreWithTransactFuncCall objects
// describing the invocations of this function.
func (f *DBStoreWithTransactFunc) History() []DBStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreWithTransactFuncCall is an object that describes an invocation of
// method WithTransact on an instance of MockDBStore.
type DBStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(accessrequests.DBStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
